#!/usr/bin/env bash
set -o errexit  # abort when any commands exits with error
set -o pipefail # abort when any command in a pipe exits with error
set -o nounset  # abort when any unset variable is used
set -o noglob # prevent bash from expanding glob
set -o errtrace # inherits trap on ERR in function and subshell
if [[ "${trace:=0}" -eq 1 ]];then
  PS4=' ${LINENO}: '
  set -x
  export trace
fi
trap 'status="$?"; echo "$(basename $0): status:${status} LINENO:${LINENO} BASH_LINENO:${BASH_LINENO} command:${BASH_COMMAND} functions:$(printf " %s" ${FUNCNAME[@]:-})"; exit ${status}' ERR

self="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd -P)/$(basename "$0")"
self_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

while getopts "a:h?" options; do case $options in
  a) a="$OPTARG" ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

if [[ "$#" -eq 0 ]];then
  ${0} help

elif [[ "$1" == "help" ]];then shift
  which bash_scripts >/dev/null && bash_scripts show_commands ${0} || true

elif [[ "$1" == "clear" ]];then shift
  docker rm -vf dind1 dind2 dind3 alpine socat prom_socat alertmanager_socat || true
  docker network rm dind || true

elif [[ "$1" == "setup" ]];then shift
  docker network create --driver=bridge --subnet=10.0.0.0/24 dind
  docker run -d --name dind1 --privileged --network dind docker:18.09-dind
  docker run -d --name dind2 --privileged --network dind docker:18.09-dind
  docker run -d --name dind3 --privileged --network dind docker:18.09-dind
  docker run -t -d --name alpine --network dind alpine /bin/sh

  : ${consul_version:="v0.6.4"}
  # : ${consul_version:="1.4.2"}
# v2.9.2
  : ${prometheus_version:="v2.7.2"}
  : ${pushgateway_version:="v0.7.0"}
  : ${registrator_version:="v7"}
  : ${alertmanager_version:="v0.16.1"}

  docker exec -it dind1 /bin/sh -c "\
    docker run -d \
      --name=consul \
      -p 8300-8302:8300-8302 \
      -p 8301-8302:8301-8302/udp \
      -p 8500:8500 \
      -p 8600:8600 \
      -p 8600:8600/udp \
      consul:${consul_version}\
      agent -dev -ui -server -advertise=$(${0} ip dind1) -client=0.0.0.0 \
      -bootstrap-expect=1 \
      "
      # -e CONSUL_BIND_INTERFACE=eth0 \
      # agent -server -advertise=$(${0} ip dind1) -client=0.0.0.0 \
      # -e CONSUL_BIND_INTERFACE=eth0 \
      # --network host \
  docker run --name socat -d --network dind -p 8500:8500 alpine /bin/sh -c "\
    apk update;\
    apk add socat; \
    socat TCP-LISTEN:8500,fork TCP:dind1:8500\
    "

  docker exec -it dind2 /bin/sh -c "\
    docker run -d \
      --name=consul \
      -p 8301:8301 \
      -p 8301:8301/udp \
      -p 8500:8500 \
      -e 'CONSUL_LOCAL_CONFIG={\"leave_on_terminate\": true}' \
      -e SERVICE_IGNORE=true \
      consul:${consul_version} \
      agent -advertise=$(${0} ip dind2) -client=0.0.0.0 -join=$(${0} ip dind1)
      "
  docker exec -it dind2 /bin/sh -c "\
    docker run -d \
      --name=registrator \
      -v /var/run/docker.sock:/tmp/docker.sock \
      --link consul \
      gliderlabs/registrator:${registrator_version} \
      consul://consul:8500\
      "

  docker exec -it dind2 /bin/sh -c "\
    docker run -d \
      --name=foo \
      -P \
      -e SERVICE_NAME=foo \
      -e SERVICE_TAGS=monitor,bla \
      prom/pushgateway:${pushgateway_version}\
      "
  docker exec -it dind2 /bin/sh -c "\
    docker run -d \
      --name=bla \
      -P \
      -e SERVICE_NAME=bla \
      -e SERVICE_TAGS=monitor,bla,foo,bar \
      prom/pushgateway:${pushgateway_version}\
      "

  docker exec -it dind3 /bin/sh -c "\
    docker run -d \
      --name=consul \
      -p 8301:8301 \
      -p 8301:8301/udp \
      -p 8500:8500 \
      -e 'CONSUL_LOCAL_CONFIG={\"leave_on_terminate\": true}' \
      -e SERVICE_IGNORE=true \
      consul:${consul_version} \
      agent -advertise=$(${0} ip dind3) -client=0.0.0.0 -join=$(${0} ip dind1)\
      "
  docker exec -it dind3 /bin/sh -c "\
    docker run -d \
      --name=registrator \
      -v /var/run/docker.sock:/tmp/docker.sock \
      --link consul \
      gliderlabs/registrator:${registrator_version} \
      consul://consul:8500\
      "
  docker exec -it dind3 /bin/sh -c "\
    docker run -d \
      --name=abc \
      -P \
      -e SERVICE_NAME=abc \
      -e SERVICE_TAGS=monitor \
      prom/pushgateway:${pushgateway_version}\
      "

  docker exec -it dind3 /bin/sh -c "mkdir -p /root/alertmanager"
  docker cp ${self_path}/alertmanager.yml dind3:/root/alertmanager/alertmanager.yml
  docker exec -it dind3 /bin/sh -c "\
    docker run -d \
      --name=alertmanager \
      -p 9093:9093 \
      -v /root/alertmanager:/etc/alertmanager-config/ \
      -e SERVICE_TAGS=monitor \
      prom/alertmanager:${alertmanager_version} \
      --config.file=/etc/alertmanager-config/alertmanager.yml \
      "
  docker run --name alertmanager_socat -d --network dind -p 9093:9093 alpine /bin/sh -c "\
    apk update;\
    apk add socat; \
    socat TCP-LISTEN:9093,fork TCP:dind3:9093\
    "

  docker exec -it dind3 /bin/sh -c "mkdir -p /root/prometheus-targets"
  docker exec -it dind3 /bin/sh -c "mkdir -p /root/prometheus-config"
  docker exec -it dind3 /bin/sh -c "mkdir -p /root/prometheus-rules"
  docker cp ${self_path}/prometheus.yml dind3:/root/prometheus-config/prometheus.yml
  docker cp ${self_path}/rules.rules dind3:/root/prometheus-rules/rules.rules
  docker cp ${self_path}/targets.json dind3:/root/prometheus-targets/targets.json
  docker exec -it dind3 /bin/sh -c "\
    docker run -d \
      --name=prometheus \
      -p 9090:9090 \
      --link consul \
      --link alertmanager \
      -v /root/prometheus-config:/etc/prometheus/prometheus-config \
      -v /root/prometheus-rules:/etc/prometheus/prometheus-rules \
      -v /root/prometheus-targets:/etc/prometheus/prometheus-targets \
      -e SERVICE_TAGS=monitor \
      prom/prometheus:${prometheus_version} \
      --config.file=/etc/prometheus/prometheus-config/prometheus.yml \
      --web.enable-lifecycle \
      "
  docker run --name prom_socat -d --network dind -p 9090:9090 alpine /bin/sh -c "\
    apk update;\
    apk add socat; \
    socat TCP-LISTEN:9090,fork TCP:dind3:9090\
    "

  docker exec -it alpine /bin/sh -c 'apk update; apk add curl'

elif [[ "$1" == "update" ]];then shift
  docker cp ${self_path}/alertmanager.yml dind3:/root/alertmanager/alertmanager.yml
  docker cp ${self_path}/prometheus.yml dind3:/root/prometheus-config/prometheus.yml
  docker cp ${self_path}/rules.rules dind3:/root/prometheus-rules/rules.rules
  docker cp ${self_path}/targets.json dind3:/root/prometheus-targets/targets.json
  curl -i -XPOST "http://localhost:9090/-/reload"
  curl -i -XPOST "http://localhost:9093/-/reload"


elif [[ "$1" == "show" ]];then shift
  echo "consul members:"
  ${0} consul_url agent/members | jq . | jq -c 'map({Addr,role:(.Tags.role)})[]'

  echo "consul services:"
  ${0} consul_url catalog/services | jq . | jq -c 'to_entries[]'

  echo "prometheus targets:"
  curl -s "http://localhost:9090/api/v1/targets" | jq -c '.data.activeTargets|map(.labels)[]'

elif [[ "$1" == "browser" ]];then shift
  browser_open_url "http://localhost:9090"
  browser_open_url "http://localhost:9093"
  browser_open_url "http://localhost:8500"

elif [[ "$1" == "consul_url" ]];then shift
  url="$1"; shift
  docker exec -it alpine /bin/sh -c "curl http://$(${0} ip dind1):8500/v1/${url}"

elif [[ "$1" == "consul_address" ]];then shift
  service_name="$1"; shift
  ${0} consul_url catalog/service/${service_name} \
    | jq -r 'map("\(.Address):\(.ServicePort)")[]'

elif [[ "$1" == "push" ]];then shift
  : ${service_name:="foo"}
  : ${value:="1"}
  : ${labels:=""}
  : ${job_name:="alert"}
  : ${metric_name:="${job_name}"}
  : ${name:="${job_name}"}
  docker exec alpine /bin/sh -c "echo '${metric_name}{name=\"${name}\"${labels}} ${value}' | curl -XPUT --data-binary @- -i -s http://$(${0} consul_address ${service_name})/metrics/job/${job_name}/name/${name}"

elif [[ "$1" == "push_delete" ]];then shift
  : ${service_name:="foo"}
  : ${labels:=""}
  : ${job_name:="alert"}
  : ${metric_name:="${job_name}"}
  : ${name:="${job_name}"}
  docker exec alpine /bin/sh -c "curl -XDELETE -i -s http://$(${0} consul_address ${service_name})/metrics/job/${job_name}/name/${name}"

elif [[ "$1" == "alpine_curl" ]];then shift
  url="$1"; shift
  docker exec -it alpine /bin/sh -c "curl -i -s http://${url}"

elif [[ "$1" == "ip" ]];then shift
  container="$1"; shift
  docker inspect ${container} | jq -r 'map(.NetworkSettings.Networks.dind.IPAddress)[]'

elif [[ "$1" == "network" ]];then shift
  docker network inspect dind | jq 'map(.Containers|map({Name,IPv4Address}))[]'

else
  echo "unknown command: $@" >&2
  exit 1
fi

